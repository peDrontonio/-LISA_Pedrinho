# #!/usr/bin/env python3

# import rospy
# from sensor_msgs.msg import Image
# from std_msgs.msg import Float32
# from cv_bridge import CvBridge, CvBridgeError
# import cv2
# import mediapipe as mp
# import os

# class FaceDirectionNode:
#     def __init__(self):
#         self.bridge = CvBridge()
#         self.face_detection = mp.solutions.face_detection.FaceDetection(min_detection_confidence=0.2)
#         self.image_sub = rospy.Subscriber("/Imagens", Image, self.image_callback)
#         self.service = rospy.Service('seguir_service', SeguirService, self.handle_seguir_service)
#         rospy.loginfo("Serviço seguir_service iniciado.")
#         self.current_image = None

#     def image_callback(self, msg):
#         self.current_image = msg

#     def handle_seguir_service(self, req):
#         if self.current_image is None:
#             return SeguirServiceResponse(success=False, message="Nenhuma imagem recebida")

#         try:
#             frame = self.bridge.imgmsg_to_cv2(self.current_image, "passthrough")
#             image_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
#             results = self.face_detection.process(image_rgb)

#             if results.detections:
#                 for detection in results.detections:
#                     bbox = detection.location_data.relative_bounding_box
#                     height, width, _ = frame.shape
#                     x_center = int(bbox.xmin * width + (bbox.width * width) / 2)
#                     y_center = int(bbox.ymin * height + (bbox.height * height) / 2)

#                     # Calcula as distâncias
#                     rect_center_x = width // 2
#                     rect_center_y = height // 2
#                     distance_x = x_center - rect_center_x
#                     distance_y = y_center - rect_center_y

#                     # Publica as coordenadas
#                     rospy.loginfo(f"Rosto seguido com coordenadas: ({distance_x}, {distance_y})")
#                     return SeguirServiceResponse(success=True, message=f"Rosto seguido com coordenadas: ({distance_x}, {distance_y})")

#             return SeguirServiceResponse(success=False, message="Nenhum rosto detectado")
#         except CvBridgeError as e:
#             rospy.logerr(f"Erro ao converter imagem: {e}")
#             return SeguirServiceResponse(success=False, message="Erro ao processar imagem")

# def main():
#     rospy.init_node('seguir_service_node')
#     face_direction_node = FaceDirectionNode()
#     rospy.spin()

# if __name__ == '__main__':
#     main()
